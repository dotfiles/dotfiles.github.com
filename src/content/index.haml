---
title: GitHub does dotfiles
---

%h1
  GitHub ❤
  %span.mono ~/

:markdown
  Why would I want my dotfiles on GitHub?

  * **_Backup_**, **_restore_**, and **_sync_** the prefs and settings for your
  toolbox. Your dotfiles might be the most important files on your machine.
  * **_Learn_** from the community. Discover new tools for your toolbox and new
  tricks for the ones you already use.
  * **_Share_** what you've learned with the rest of us.

  ## Get started with a bootstrap

  If you're just starting out, before you go symlinking everything in `~/*`,
  you may want to check out a few bootstrap projects that take the heavy lifting
  out of the process. Here are a few of our favorites:

  * [Zach Holman's dotfiles](https://github.com/holman/dotfiles) features
  topical organization, auto sourcing Zsh files, easy Zsh completion
  extensions, and a local bin folder for executables. The included `Rakefile` will
  symlink anything ending in `.symlink` to your `~` folder.
  * [Mathias Bynens' dotfiles](https://github.com/mathiasbynens/dotfiles)
  includes a bootstrap script that rsyncs your repo to your home folder.
  Mathias' [OS X defaults
  script](https://github.com/mathiasbynens/dotfiles/blob/master/.osx) is
  legendary.
  * [Yan Pritzker's dotfiles](https://github.com/skwp/dotfiles) bundles an
  opinionated set of Vim plugins and Zsh setup all tuned for using
  [Solarized](http://ethanschoonover.com/solarized) on OS X.
  * [Josh Nichols' Homesick](https://github.com/technicalpickles/homesick)
  makes it easy to symlink and clone dotfiles repos.
  * [Anders Ingemann's homeshick](https://github.com/andsens/homeshick) is like
  Homesick but in bash.
  * [Ben Alman's dotfiles](https://github.com/cowboy/dotfiles) support
  different configurations per OS, linking, copying and environment setup.
  * [Paul Miller’s dotfiles](https://github.com/paulmillr/dotfiles) feature
  greatly customized zsh with auto-completion and syntax highlighting,
  a bunch of useful git extras and colourful themes for OS X Terminal and Sublime Text 2.

  ## Go farther with a framework

  For a lot of us, a big chunk of our `~` folder is devoted to our shell and
  our text editor. Until you're ready to roll your own setup, these projects make
  customization safe and easy.

  * [oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh) is a
  community-driven framework for managing your Zsh configuration. It bundles
  40+ plugins and 80+ themes.
  * [bash-it](https://github.com/revans/bash-it)
  is a "shameless ripoff of oh-my-zsh," but for bash.
  * [Janus](https://github.com/carlhuda/janus) is a distribution of plug-ins
  and mappings for Vim, Gvim and MacVim.
  * [Brandon Philip's ghar](https://github.com/philips/ghar) is a standalone
  Python script for managing git repos symlinked into your home.
  * [Ben Alman's dotfiles](https://github.com/cowboy/dotfiles) support
  different configurations per OS, linking, copying and environment setup.
  * [fresh](https://github.com/freshshell/fresh) is a tool to source dotfiles
  from others into your own. It supports shell configuration (aliases,
  functions, etc.) as well as config files (e.g. `ackrc` and `gitconfig`).
  Think of it as _Bundler for your dotfiles_.

  ## Don't ignore your `.gitignore`

  GitHub has a [great collection of `.gitignore` templates](https://github.com/github/gitignore)
  for a wide range of languages and editors. We recommend
  [Simon Whitaker's shell script](https://github.com/simonwhitaker/gitignore-boilerplates)
  to help you manage them.

  ## Embrace submodules

  Consider using [Git submodules](http://help.github.com/submodules/) as you
  start to add 3<sup>rd</sup> party frameworks, scripts, and plugins. Submodules make
  managing dotfile dependencies with so much easier.

%h2 FAQ

%dl.faq
  %dt Why create this site?
  %dd
    :markdown
      Some of your [fellow GitHub friends](http://github.com/dotfiles) have
      found incredible value in digging through Other People's Dotfiles
      (OPD). We aim to share that knowledge with you, our fellow wayfaring
      stranger in the shell.

  %dt You totally need to know about <code>/my|a/</code> great <code>/bootstrap|framework/</code>, how do I submit?
  %dd
    :markdown
      Great! We're always looking for new projects to follow. Please [connect
      with us on Twitter](http://twitter.com/octodots).

  %dt Oh no! I've committed passwords/API keys/other sensitive data!
  %dd
    :markdown
      We've got you covered! Take a look at the [sensitive data removal
      guide](http://help.github.com/remove-sensitive-data).

  %dt Your FAQ is weak. It <em>so</em> did not answer my question.
  %dd
    :markdown
      That's not a question. But feel free to [ask us anything on
      Twitter](http://twitter.com/octodots). Maybe we can expand this list.

:markdown
  ## Contribute

  Want to help out? Great! Submit a [feature request](https://github.com/dotfiles/dotfiles.github.com/issues), [open an issue](https://github.com/dotfiles/dotfiles.github.com/issues), or [submit a patch](https://github.com/dotfiles/dotfiles.github.com).
